{
  "name": "Simple-Cache",
  "version": "1.0.0",
  "description": "It is a really simple disk caching library",
  "homepage": "https://github.com/mostlygeek/Node-Simple-Cache",
  "main": "SimpleCache",
  "repository": {
    "type": "git",
    "url": "git://github.com/mostlygeek/Node-Simple-Cache.git"
  },
  "dependencies": {},
  "devDependencies": {},
  "author": {
    "name": "Benson Wong",
    "email": "mostlygeek@gmail.com",
    "url": "http://mostlygeek.com/"
  },
  "readme": "About\n-----\nA *really* simple cache to disk library. It will either return data from the \ndisk cache file or fetch it from the source. \n\nUsage Examples\n--------------\n\n.Basic Example\n----\n/**\n * Like just run this. It should be self explanitory \n * how it works. \n */\nvar cache = require('./Cache.js').Cache(\"/tmp\", console.log);\n\n/**\n *  cache.get returns a promise, cause tons of callback chains\n *  suck. \n *  \n *  Usage: get(string key, cacheMissFn) { .... }\n */ \nvar promise = cache.get('my testing data', function(callback) {\n    // some async operation... \n    callback(results);    \n});\n----\n\n.Multiple Callback Handlers on the Promise\n----\npromise.fulfilled(function(results) {\n   console.log(\"Callback 1: \" + results);\n});\n\npromise.fulfilled(function(results) {\n   console.log(\"Callback 2: \" + results);\n});\n----\n\n.Fluent Interfaces\n----\npromise.fulfilled(function(results) {\n    console.log(\"Fluent interface 1\");\n}).fulfilled(function(results) {\n    console.log(\"Fluent interface 2\");\n}).fulfilled(function(results) {\n    console.log(\"Fluent interface 3. Ok we get it\");\n});\n----",
  "readmeFilename": "README.asciidoc",
  "bugs": {
    "url": "https://github.com/mostlygeek/Node-Simple-Cache/issues"
  },
  "_id": "Simple-Cache@1.0.0",
  "_from": "Simple-Cache@"
}
