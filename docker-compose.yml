version: "3.4"

services:
  build:
    build:
      context: .
      target: build
    environment:
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
    volumes:
      # Provide access to our docker daemon to the build container so that it
      # can use it to build the image. Note: this is only for local runs, under
      # Bitbucket Pipelines DOCKER_HOST specifies a tcp:// URL for the docker
      # daemon.
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/code/
    command: make docker-image
  test:
    build:
      context: .
      target: dev
    volumes:
      # Mount everything except node_modules and package*.json (docker-compose
      # doesn't provide a way to exclude part of a directory).
      #
      # This (horrible) list can be generated with:
      #   $ git ls-files | cut -d / -f 1 - | uniq | grep -vE 'node_modules|package.*\.json' | xargs -I '{}' printf '- ./%s:/code/%s\n' '{}' '{}'
      - ./.dockerignore:/code/.dockerignore
      - ./.editorconfig:/code/.editorconfig
      - ./.eslintignore:/code/.eslintignore
      - ./.eslintrc.json:/code/.eslintrc.json
      - ./.gitignore:/code/.gitignore
      - ./.npmignore:/code/.npmignore
      - ./.prettierrc.js:/code/.prettierrc.js
      - ./Dockerfile:/code/Dockerfile
      - ./Makefile:/code/Makefile
      - ./README.md:/code/README.md
      - ./bin:/code/bin
      - ./bitbucket-pipelines.yml:/code/bitbucket-pipelines.yml
      - ./config:/code/config
      - ./docker-compose.adminer.yml:/code/docker-compose.adminer.yml
      - ./docker-compose.yml:/code/docker-compose.yml
      - ./docker:/code/docker
      - ./docs:/code/docs
      - ./integration_test:/code/integration_test
      - ./jest.config.js:/code/jest.config.js
      - ./public:/code/public
      - ./saxon:/code/saxon
      - ./sql:/code/sql
      - ./src:/code/src
      - ./test:/code/test
      - ./transforms:/code/transforms
      - ./tsconfig.build.json:/code/tsconfig.build.json
      - ./tsconfig.json:/code/tsconfig.json
    environment:
      TEST_DB_HOST: db
      TEST_AWS_ENDPOINT_URL: 'http://localstack:4566'
      CI: 'true'
    command: npm test
    depends_on:
      - db
      - flyway
      - localstack

  db:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_USER: cudlservices
      POSTGRES_DB: cudlservices
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD:-password}
    ports:
      - "${TEST_DB_PORT:-5432}:5432"

  flyway:
    image: flyway/flyway:6.1.0
    depends_on:
      - db
    volumes:
      - ./integration_test/data/postgres-migration:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://db/cudlservices
      FLYWAY_USER: cudlservices
      FLYWAY_PASSWORD: ${TEST_DB_PASSWORD:-password}
    command: migrate -connectRetries=60

  # Provide local Amazon S3 for integration tests
  localstack:
    image: localstack/localstack
    environment:
      SERVICES: iam,s3
    ports:
      - "4566:4566"
      - "4571:4571"
