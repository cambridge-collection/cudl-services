name: Test and publish Docker image

on: push

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  SHELLOPTS: nounset:pipefail

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Unit & integration tests
        run: docker-compose run --rm test
  create-docker-image:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG_COMMIT_SHA: ${{ steps.build-docker-image.outputs.IMAGE_TAG_COMMIT_SHA }}
      IMAGE_TAG_COMMIT_TAG: ${{ steps.build-docker-image.outputs.IMAGE_TAG_COMMIT_TAG }}
    steps:
      - uses: actions/checkout@v2
      - name: Build & tag image
        id: build-docker-image
        run: make docker-image github-actions-set-docker-image-tag-outputs
      - name: Smoke test image
        env:
          SMOKE_TEST_IMAGE: "${{ steps.build-docker-image.outputs.IMAGE_TAG_COMMIT_SHA }}"
          COMPOSE_FILE: "docker-compose.yml:docker/docker-compose_image-smoke-test.yml"
        run: |
          docker-compose up -d smoke-test-cudl-services
          docker-compose run wait-smoke-test-cudl-services
          docker-compose run smoke-test
      - name: Save image artefact
        if: github.ref == 'refs/heads/master'
        run: |
          mkdir -p build && \
          docker image save \
            ${{ steps.build-docker-image.outputs.IMAGE_TAG_COMMIT_SHA }} \
            ${{ steps.build-docker-image.outputs.IMAGE_TAG_COMMIT_TAG }} \
            | gzip > build/docker-image.tar.gz
      - name: Cleanup old artefacts
        uses: c-hive/gha-remove-artifacts@v1
        if: github.ref == 'refs/heads/master'
        with:
          # keep 4 most-recent artefacts
          age: '0 seconds'
          skip-recent: 4
      - name: Upload image artefact
        uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master'
        with:
          name: docker-image
          path: build/docker-image.tar.gz
  publish-docker-image:
    runs-on: ubuntu-latest
    needs: [test, create-docker-image]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download image artefact
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: build
      - run: gzip -d --stdout build/docker-image.tar.gz | docker image load
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push commit SHA image version
        run: |
          docker image push \
            "${{ needs.create-docker-image.outputs.IMAGE_TAG_COMMIT_SHA }}"
      - name: Push commit tag image version
        if: needs.create-docker-image.outputs.IMAGE_TAG_COMMIT_TAG
        run: |
          docker image push \
            "${{ needs.create-docker-image.outputs.IMAGE_TAG_COMMIT_TAG }}"
